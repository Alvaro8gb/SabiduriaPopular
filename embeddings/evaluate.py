def similarity_with_cohere(reference : list[str], system_output : list[str], apikey_filepath="default") -> tuple[list[float] , float]:
    """
    Evaluate the similarity between two list of texts using Cohere multilingual v3.0

    Args:
        reference: list of reference texts
        system_output: list of text generated by the llm.

    Returns:
        list of pair similarity
        mean similarity
    """

    import cohere
    import os , pathlib
    import numpy as np

    current_filepath = pathlib.Path(os.path.abspath(__file__))
    api_key = ""

    if apikey_filepath == "default":
        with open(os.path.join(current_filepath.parent,"api-key.txt"),"r",encoding="utf-8") as f:
            api_key = f.read()
    else:

        if not os.path.exists(apikey_filepath):
            raise FileNotFoundError(f"{apikey_filepath} not found")
        
        with open(apikey_filepath,"r",encoding="utf-8") as f:
            api_key = f.read()

    co = cohere.ClientV2(api_key=api_key)

    def embbed_w_pagination(texts_to_embedd : list[str], ):

        embeddings = []
        start_index = 0
        pagination_index = 96
        while start_index < len(texts_to_embedd):
            response = co.embed(texts=texts_to_embedd[start_index:pagination_index],
                                        model="embed-multilingual-light-v3.0",
                                        output_dimension=384,
                                        input_type="search_query",
                                        embedding_types=["float"])
            embeddings.extend(response.embeddings.float_)
            start_index +=96
            pagination_index = min(pagination_index+96,len(texts_to_embedd))
            
        return embeddings
    
    def calculate_similarity(a, b):

        result_similarities = []
        for i in range(len(a)):
            similarity = np.dot(a[i], b[i]) / (np.linalg.norm(a[i]) * np.linalg.norm(b[i]))
            result_similarities.append(similarity)

        return result_similarities
    

    reference_embeddings = embbed_w_pagination(reference)
    system_output_embeddings = embbed_w_pagination(system_output)

    similarities = calculate_similarity(reference_embeddings,system_output_embeddings)
    mean_similarity = np.mean(similarities)

    return (similarities, mean_similarity)

